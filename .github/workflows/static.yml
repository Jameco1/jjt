<!DOCTYPE html>
<html>
<head>
  <title>Teachable Machine Image Model (Mobile)</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0"> <!-- responsive -->
  <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@latest/dist/tf.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@teachablemachine/image@latest/dist/teachablemachine-image.min.js"></script>
  <script src="https://unpkg.com/mqtt/dist/mqtt.min.js"></script> <!-- ‚úÖ MQTT.js -->
  <style>
    body {
      font-family: Arial, sans-serif;
      text-align: center;
      margin: 0;
      padding: 0;
    }
    #webcam-container {
      max-width: 100%;
      margin: 10px auto;
    }
    video {
      max-width: 100%;
      height: auto;
    }
    #label-container {
      margin: 10px;
      font-size: 1.2em;
    }
    button {
      padding: 10px 20px;
      font-size: 1em;
      margin: 5px;
    }
  </style>
</head>
<body>
  <div>Teachable Machine Image Model (Mobile)</div>
  <button type="button" onclick="init('environment')">Start (Back Camera)</button>
  <button type="button" onclick="init('user')">Start (Front Camera)</button>
  <button type="button" onclick="stop()">Stop</button>
  <div id="webcam-container"></div>
  <div id="label-container"></div>
  <script type="text/javascript">
    const URL = "https://teachablemachine.withgoogle.com/models/ahaxFn-GG/";
    let model, webcam, labelContainer, maxPredictions;

    // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î MQTT
    const broker = "wss://broker.hivemq.com:8884/mqtt"; 
    const topic = "teachable/shape"; // ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà Topic ‡∏ô‡∏µ‡πâ
    const client = mqtt.connect(broker);

    client.on("connect", () => {
      console.log("‚úÖ Connected to HiveMQ Broker");
    });

    client.on("error", (err) => {
      console.error("‚ùå MQTT Error:", err);
    });

    async function init(facingMode) {
      const modelURL = URL + "model.json";
      const metadataURL = URL + "metadata.json";
      model = await tmImage.load(modelURL, metadataURL);
      maxPredictions = model.getTotalClasses();

      webcam = new tmImage.Webcam(224, 224, false);
      try {
        await webcam.setup({ facingMode: facingMode });
        await webcam.play();
        if (!webcam.canvas) throw new Error("Webcam canvas is not initialized");
        window.requestAnimationFrame(loop);
      } catch (e) {
        console.error("Webcam setup failed:", e);
        document.getElementById("label-container").innerText = "Error: " + e.message;
        return;
      }

      document.getElementById("webcam-container").appendChild(webcam.canvas);
      labelContainer = document.getElementById("label-container");
      labelContainer.innerHTML = "";
      for (let i = 0; i < maxPredictions; i++) {
        labelContainer.appendChild(document.createElement("div"));
      }
    }

    async function loop() {
      webcam.update();
      await predict();
      window.requestAnimationFrame(loop);
    }

    async function predict() {
      const prediction = await model.predict(webcam.canvas);

      // ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
      let bestClass = prediction[0].className;
      let bestProb = prediction[0].probability;

      for (let i = 1; i < maxPredictions; i++) {
        if (prediction[i].probability > bestProb) {
          bestClass = prediction[i].className;
          bestProb = prediction[i].probability;
        }
      }

      // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      for (let i = 0; i < maxPredictions; i++) {
        const classPrediction = prediction[i].className + ": " + prediction[i].probability.toFixed(2);
        labelContainer.childNodes[i].innerHTML = classPrediction;
      }

      // ‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞ class ‡∏ó‡∏µ‡πà‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à > 0.8
      if (bestProb > 0.8) {
        client.publish(topic, JSON.stringify({ shape: bestClass, confidence: bestProb.toFixed(2) }));
        console.log("üì§ ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏õ MQTT:", bestClass, bestProb.toFixed(2));
      }
    }

    function stop() {
      if (webcam) {
        webcam.stop();
        document.getElementById("webcam-container").innerHTML = '';
        document.getElementById("label-container").innerHTML = '';
      }
    }
  </script>
</body>
</html>
